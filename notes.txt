📽️ Project: PhantomPlay – Auto Play YouTube Video on Remote Device
✅ Basic Functionality

Goal: Automatically play a YouTube video on a target device (e.g., phone) from another device (e.g., laptop) using Python scripts and Flask.
🧱 Project Structure
1. Setup Python on Both Devices

    Install Python (if not already installed)

    Ensure both devices are connected to the same network

2. 📥 Receiver (Device B – Mobile/Target)

Create a file named [receiver.py]:

from flask import Flask, request
import webbrowser

app = Flask(__name__)

@app.route("/play", methods=["POST"])
def play_video():
    data = request.get_json()
    url = data.get("url")
    timestamp = data.get("time")

    if url and timestamp is not None:
        final_url = f"{url}&t={timestamp}"
        webbrowser.open(final_url)
        return {"status": "success"}, 200
    else:
        return {"error": "Invalid input"}, 400

app.run(host='0.0.0.0')

✅ Flask server listens for /play route
✅ Opens the YouTube video in a browser at the given timestamp

3. 📤 Sender (Device A – Laptop/Controller)

Create a file named [sender.py]:

import requests

receiver_ip = "http://10.21.125.154:5000/play"  # Change IP to Device B

video_url = input("Enter YouTube video URL: ")
timestamp = input("Enter current time (in seconds): ")

data = {
    "url": video_url,
    "time": timestamp
}

res = requests.post(receiver_ip, json=data)

try:
    print("Response:", res.json())
except:
    print("Response content:", res.text)

✅ Sends POST request with video URL and timestamp
✅ Receives JSON confirmation from receiver


🔧 Optional Enhancements (Roadmap)

🌐 ✅1. Web Dashboard

    Create a Flask GUI for sender (HTML + form)

    Easier than CLI

    Use from browser, no script run needed

🔄 ✅2. Robust IP Management

    Auto-detect devices via:

        ✅UDP Broadcast

        mDNS (Bonjour/Zeroconf)

    Avoid manual IP entry

🔒 3. Security

    Add secret token to requests

    Block unknown senders

    Future: OAuth for public version

📱 4. Mobile APK + Windows EXE

    Convert receiver.py to Android APK (Kivy, BeeWare)

    Convert sender.py to Windows EXE (PyInstaller)

🌍 5. Permanent Server Hosting

    Host receiver.py on:

        Raspberry Pi

        VPS (low-cost)

    Control from anywhere (not just LAN)

📡 6. Multiple Device Management

    Maintain list of connected devices

    Sender chooses target device

    e.g., “Send to Phone A / Tablet B”

🔁 7. Two-Way Feedback

    Receiver sends back:

        “Video opened successfully”

        “Error: browser not available”

📂 8. Batch Playlists

    Upload multiple URLs + timestamps

    Receiver plays them in sequence

🔔 9. Push Notifications

    After receiving request, mobile shows notification

    Use Firebase or Pushover

🎭 10. Phantom Ecosystem Branding

Build full suite under "Phantom" brand:

    PhantomPlay – Media auto-play

    PhantomControl – Remote control (scripts, triggers)

    PhantomShare – LAN-based file sharing

    PhantomStream – Playlist manager


⚙️ Advanced Ideas

    Access Point setup for isolated control

    Host Flask or Apache server on Kali Linux

    Ensure robustness (avoid crashes)

    Background service support (mobile, system daemon)

    Link Generator for quick access

My notes:
#server setup, multiple devices setup, 
#how to make kali a server 
#link generate
#pernenant access of mobiles.
#roboust. server crash nhi hona chaye.
#access point = force to broadcast, acccept device.
#switch apache server. flask
#check roboustness -> make apk so it will work on all devices.
# focus on browser to browser


